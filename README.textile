h1. *Installing Opal*
 
To install Opal, follow these steps;

h2. Download Opal

Opal is available for download "here":http://www.hulihanapplications.com/projects/opal.

h2. Extract & Upload

Once Opal is downloaded, extract it to the location you'll be running it from(a webserver, your local computer, etc.).

* Note: To install Opal, SSH/Command Line access to the server/computer that you're installing it on is required.

We'll be running commands from the Opal directory itself. Next, you'll change to your Opal directory. For this step, you'll need to know where you uploaded Opal. Here's an example of what the command will look like:
<pre>
cd path/to/wherever/you/uploaded/opal
</pre>  

h2. Install Gems

Before Opal is up and running, we need to install all of its required gems(also known as dependencies). To do this, run this command:
<pre>
bundle install
</pre>

h2. Set Up Your Database 

Just like most Rails applications, you must configure which database Opal will use by editing the _config/database.yml_ file. By default, Opal uses MySQL, but you can configure opal to use sqlite, and any other rails-compatible database systems. Here's an example of what the database.yml file should look like:

<pre>
development:
  adapter: mysql
  database: database
  username: databaseuser
  password: somepassword

production:
  adapter: mysql
  database: database
  username: databaseuser
  password: somepassword
</pre>

This assumes that the database is already created by you. 

h2. Install Database 

Next, Run the following command(while in the Opal directory) to install Opal's database schema in production mode: 
<pre>
rake opal:install RAILS_ENV=production
</pre>

This will install the database structure of Opal into the production database. If you leave out *RAILS_ENV=PRODUCTION*, everything will be installed into your development database instead. This command will also set up the default admin account, some sample items(you'll be asked if you want to install sample Data), and other stuff to help you get started with Opal.

  * If you want to automate an Opal installation, or if you just want to bypass prompts(that ask you if you want to install sample data and other stuff: run this command: _rake opal:install PROMPTS=FALSE_)

h2. That's it! 

Run your application on the web using your favorite webserver: apache, mongrel, webrick, or nginx. 
To log in to Opal for the first time, the default Admin username and password is: *admin*.

h1. Troubleshooting

h2. Gem Problems

If Opal is having trouble loading any of its required gems, you can always store them locally inside of Opal. To do this, run the following command from the Opal directory:
<pre>
bundle install --deployment
</pre> 

This will store all required gems in vendor/bundle, which Bundler knows to look for automatically.

h1. *Extra Stuff*

h2. Email Settings

Opal includes an automated email system that will send you emails whenever someone registers, creates a new item, etc. 
To use this automated email system, you must configure the _config/email.yml_ file to connect to an SMTP email server. Here's an example of what this file should look like:

<pre>
development:
  :address: smtp.server.com
  :port: 25
  :authentication: plain
  :user_name: user
  :password: pass

production:
  :address: smtp.server.com
  :port: 25
  :authentication: plain
  :user_name: user
  :password: pass
</pre>

h2. Running Opal with FastCGI

If you're running Opal on a shared hosting company like Bluehost, Hostmonster, IXWebhosting, etc. you're probably being forced to run all your Rails applications with FastCGI, which is a little more difficult to set up than Passenger(mod_rails) or Mongrel. To run Opal with FastCGI, you need to enable the _.htaccess_ file in the _public/_ directory. To do this, go into your Opal directory and do the following:
<pre>
cd public/
mv .htaccess.fastcgi .htaccess
</pre>





